services:
  # [TODO]
  # backend, frontendのコンテナ内からgitリモートリポジトリに接続できるようにしたい。
  # 開発はコンテナ内で行うので、コンテナ内からpush,fetch,pullなどのgitコマンドを実行できるようにしたい。
  # 可能なら、git configなど設定コマンドを手動で実行することも無くす。ホストOSの.git/configや.gitconfigをコピーorマウントすればいい？（未調査）
  backend:
    build: ./docker/lambda-backend
    container_name: lambda-backend
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      # カレントディレクトリをマウント。samを使用する場合は、ホストとコンテナ内のディレクトリ構造を一致させる必要があるらしい
      - $PWD:$PWD
      # コンテナ内でdockerを使用できるようにするため、/var/run/docker.sockをマウント
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: $PWD/lambda-backend
    command: ['/bin/bash', "$PWD/docker/lambda-backend/entrypoint.sh"]
    ports:
      - 13000:3001
    networks:
      - backend
    depends_on:
      # コンテナ間の依存関係を記述
      # databaseのコンテナ起動後にbackendを起動する。
      # ここではdatabaseコンテナが先に起動するが、databaseコンテナの起動に失敗した場合や、DBアクセスが可能になるまで待機する等は考慮しない。
      # depends_onは起動順を制御するだけなので、厳密に行うならhealthcheckを利用する。
      - database
      - minio
    tty: true
  
  lambda:
    # REST API以外のlambda関数のエンドポイント
    # minioやcognitoのトリガーを使う場合は、こちらを呼び出すことになるはず
    # [TODO]
    # できればbackendと統一したい
    build: ./docker/lambda-backend
    container_name: lambda-endpoint
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - $PWD:$PWD
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: $PWD/lambda-backend
    command: ['/bin/bash', "$PWD/docker/lambda-backend/lambda_entrypoint.sh"]
    ports:
      - 13001:3001
    networks:
      - backend
    depends_on:
      - database
      - minio
    tty: true
  
  database:
    image: postgres:15-bullseye
    container_name: postgres-db
    volumes:
      - ./database/data:/var/lib/postgresql/data
      # database/initdb にDB初期化の*.sql, *shファイルを格納する。テーブル作成のDDL文や初期データのINSERT文など
      # コンテナ内の /docker-entrypoint-initdb.d 内に配置したスクリプトがコンテナ作成時に実行される。
      # 詳細は https://hub.docker.com/_/postgres
      - ./database/initdb:/docker-entrypoint-initdb.d
    ports:
      - 15432:5432
    environment:
      # [TODO]
      # DBのユーザー名、パスワードなどを別ファイルから読み込むように変更する。
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=postgres
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    user: root
    networks:
      # lambda-backendコンテナからDBアクセスを行うため、networkを共有する。
      - backend
  
  minio:
    # AWS S3互換のファイルストレージ
    image: minio/minio:RELEASE.2023-11-11T08-14-41Z
    container_name: local-minio
    ports:
      - 19000:9000
      - 19001:9001
    environment:
      # [TODO]
      # ユーザー名、パスワードを別ファイルから読み込むように変更する。
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --address :9000 --console-address :9001
    volumes:
      # Bucketという単位でファイルを管理する。フォルダのようなイメージでいいはず。
      # ./minio 直下のディレクトリが初期Bucketとして作成される。
      # http://localhost:19001/login から管理画面にアクセスできる。
      - ./minio:/data
    networks:
      # lambda-backendコンテナからアクセスするため、networkを共有する。
      - backend
  
  cognito-local:
    # Cognitoのモックサーバー
    # https://github.com/jagregory/cognito-local
    # AWS公式ではないので、注意
    # ユーザープール作成、ユーザープールクライアント作成、ユーザー作成、パスワードの設定、認証とトークン発行など基本的な機能はある模様
    # Lambdaトリガーの設定も可能
    # トークン生成後のトリガーもあるので、JWTに任意のプロパティを埋め込むこともできる。
    # ただし、Cognitoの全機能を再現しているわけではないため、利用可能な機能については上記URLで確認する。
    # API呼び出し時の認証を自作したい場合は Lambdaオーソライザー を利用する。
    # 参考：https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/using-sam-cli-local-start-api.html
    image: jagregory/cognito-local:latest
    container_name: cognito-local
    depends_on:
      - lambda
    ports:
      - 19229:9229
    volumes:
      - ./.cognito:/app/.cognito

  frontend:
    build: ./docker/react-frontend
    container_name: react-frontend
    volumes:
      # [TODO]
      # node_modulesをマウントしないように修正する。
      # node_modulesにはOSや環境依存のライブラリなどもあるので、ホストOSから編集可能なのはNG
      - .:/prj-root
      - ./docker/react-frontend:/docker/react-frontend
    working_dir: /prj-root/react-frontend
    command: ['/bin/bash', "/docker/react-frontend/entrypoint.sh"]
    ports:
      - 15173:5173
    tty: true

networks:
  backend:
    name: backend_network
    driver: bridge